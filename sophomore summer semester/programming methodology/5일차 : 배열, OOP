programming methodology day 5

int[] src = {1,2,3}, dst = new int[3];
System.arraycopy(src, 0, dst, 0, src.length);

얕은 복사 vs. 깊은 복사
1차원 배열은 메서드 호출로 주소만 복사(얕은 복사)
2차원 이상은 deepCopy를 직접 구현하거나 Arrays.stream(...).map(...) 등으로 각 행을 복사해야 함.

쓰는방법
int[] arr = {1, 2, 3};
or
int[] arr = new int[3];
-> c처럼 크기 지정해줘야 함

# OOP
- 프로그램을 객체 단위로 설계·구성하는 방식

장점
- 유지 보수성: 코드가 객체별로 분리되어, 한 부분 문제 발생 시 해당 객체만 고치면 됨 
- 재사용성: 잘 만든 클래스는 다른 프로젝트에서도 손쉽게 가져다 쓸 수 있음 
- 확장성: 처음부터 모듈화된 구조이므로, 새로운 기능을 추가하거나 변경하기 용이 

클래스(Class) vs 객체(Object)
- 클래스: 객체를 찍어내는 틀
- 객체(인스턴스): 클래스라는 설계도대로 메모리에 실제 생성된 실체.
- 클래스 설계만으로는 아직 실행 불가. new 키워드를 통해 메모리에 올려야 비로소 동작 가능한 객체가 됨
- 인스턴스화(instantiation): 클래스로부터 객체를 만드는 과정 

메서드 오버로딩(method overloading)
- 같은 이름의 함수(메서드)를 매개변수로 구분하는 것





