시스템프로그래밍기초 10주차

코드가 데이터 영역 위에 올라옴
데이터 영역(데이터, 힙, 스택)

메모리에 올라가 있다 -> 주소가 있다
주소를 안다 -> 읽고 쓸 수 있다
읽을 때는 데이터의 형식을 알아야 함
-> 어디에서 어떻게 읽어올 것인가

포인터
- 8바이트 정수형

이중 포인터
- int ** p

다중 포인터
- int **** p

배열 포인터
- int (*p) [10]

포인터 배열
- int * p[10]

함수 포인터
- int (*p)(int, int)

void 포인터
- 주소만 있는 포인터

배열 -> 포인터
- 단위(int)를 맞춰주면 됨
- 배열의 단위는 포인터의 형식
- 배열의 단위 * ptr
ex)
int arr[4]
int * ptr = arr

int arr[3][2]
int [2]*ptr = arr (x)
int (*ptr)[2] (o)

배열 표기법
- int arr[4]
- *(arr+1) == arr[1]

ex)
int * ptr;
형식/포인터변수/이름

int x = 100;
int * ptr;
ptr = &x;
형식/포인터변수/이름
-> ptr에 정수 포인터 상수가 있어야 함
변수 x의 포인터 상수 -> &x
cf. &는 주소와 형식 둘을 반환함 (포인터 상수와 주소의 형식은 같아야 함)

double * * ptr;
형식/포인터변수/포인터변수/이름
-> 그러니까 ptr 100번지라고 하면 거기에 double*가 있는거임 
  double*는 또 다른 주소를 가리키고 있음

ptr이 x의 번지를 알고 있는데 
여기서 ptr이 리턴하는 값은 그냥 주소임
그래서 그 안의 값을 읽어줘야 하는데(참조해야 하는데)
*ptr이 참조임 -> x의 값을 ptr이 읽어옴
int a = *ptr;

*ptr = 200;
-> x를 참조로 연결하고 (*) 주소를 불러와서 (&) 값을 바꿀 수 있음 


//시스템프로그래밍 10주차
#include <stdio.h>
#include <limits.h>
#include <math.h>
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>

//double add(double* arr, int length) {
//    
//    double sum = 0;
//    
//    for (int i = 0; i < length; ++i) {
//        sum += *(arr + i);
//    }
//    
//    return sum;
//}
//
//void print_arr(double* arr, int length) {
//    
//    for (int i = 0; i < length; ++i) {
//        printf("the element of arr is %.1f \n", *(arr + i));
//    }
//    
//    return;
//}
//
//int main(void) {
//    
//    double arr[5] = {1.3, 3.2, 4.1, 6.2, 7.1};
//    int length = sizeof(arr) / sizeof(double);
//    
//    double result = add(arr, length);
//    
//    printf("sum of array is %.1f \n", result);
//
//    print_arr(arr, length);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//int max(int* arr, int length) {
//    
//    int max = 0;
//    
//    for (int i = 0; i < length; ++i) {
//        if (max < *(arr + i)) {
//            max = *(arr + i);
//        }
//    }
//    
//    return max;
//}
//
//int main(void) {
//    
//    int arr[4] = {43, 5, 31, 52};
//    int length = sizeof(arr) / sizeof(int);
//    //와존나신기해
//    
//    int result = max(arr, length);
//    //arr은 그 자체로 이미 주소값을 나타내고 있음
//    
//    printf("max is %d \n", result);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//int* large(int* a, int* b) {
//    
//    int max;
//    if (*a > *b) {
//        max = *a;
//    }
//    else if (*a <= *b) {
//        max = *b;
//    }
//    
//    return &max;
//}
//
//int main(void) {
//    
//    int f = 10, s = 200;
//    int* ptr;
//    
//    ptr = large(&f, &s);
//    
//    printf("larger one is %d \n", *ptr);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//void minmax(int f, int s, int* larger, int* smaller) {
//    
//    if (f < s) {
//        *larger = s;
//        *smaller = f;
//    }
//    else if (f > s) {
//        *larger = f;
//        *smaller = s;
//    }
//    else {
//        *larger = f;
//        *smaller = s;
//    }
//    
//    return;
//}
//
//int main(void) {
//    
//    int first = 564212;
//    int second = 31223;
//    
//    int larger, smaller;
//    
//    minmax(first, second, &larger, &smaller);
//    
//    printf("larger one is %d \nsmaller one is %d \n", larger, smaller);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//void swap(int* first, int* second) {
//    
//    int temp;
//    temp = *first;
//    *first = *second;
//    *second = temp;
//    
//    return;
//}
//
//int main(void) {
//    
//    int first = 50;
//    int second = 200;
//    
//    swap(&first, &second);
//    
//    printf("first is %d \nsecond is %d \n", first, second);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//void one(int* ptr) { //call by pointer
//    
//    *ptr += 1;
//
//    return;
//}
//
//void one_value(int a) { // call by value
//    
//    a = a + 1;
//    
//    return;
//}
//
//int main(void) {
//    
//    int x = 32;
//    
//    one(&x);
//    
//    printf("%d \n", x);
//    
//    return 0;
//}

//    ----------------------- 10-2 -------------------------
//int main(void) {
//    
//    int first = 50;
//    int second = 200;
//    int* ptr;
//    
//    printf("%p \n", &first);
//    printf("%p \n", &second);
//    printf("%p \n", &ptr);
//    
//    ptr = &first;
//    printf("%p \n", ptr);
//    printf("%d \n", *ptr);
//    printf("%p \n", &ptr);
//    
//    second = *ptr;
//    printf("%d \n", second);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//int main(void) {
//    
//    double x = 3.14;
//    double* ptr;
//    
//    ptr = &x;
//    //변수 x와 포인터 ptr이 연결됨
//    
//    *ptr = *ptr + 1.0;
//    
//    printf("%f \n", *ptr);
//    printf("%p \n", ptr);
//    printf("%p \n", &x);
//    printf("%lu \n", sizeof(ptr));
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//int main(void) {
//    
//    int x = 100;
//    int* ptr;
//    
//    ptr = &x;
//    
//    int a = *ptr;
//    
//    printf("*ptr is %d \n", *ptr);
//    
//    printf("ptr is %p \n", ptr);
//    printf("&x is %p \n", &x);
//    
//    *ptr = 2000;
//    printf("x is %d \n", x);
//    
//    return 0;
//}


