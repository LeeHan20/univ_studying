시스템프로그래밍기초 9주차

data/heap/stack
- 전역변수는 data
- 동적 할당은 heap
- 함수는 stack

cf. 함수는 변수를 사용할 때 먼저 본인의 sf를 확인하고 없으면 data를 확인함

auto 변수
- 일반적으로 int name 하면 auto 변수임

static 변수
- 함수 안에서 정의하지만 data에 만들어짐
- but, 정의된 함수 내에서만 사용 가능
- 함수가 종료되어도 값이 사라지지 않음
-> 다음 번 함수 호출에서 전 함수가 내놓은 값을 사용할 수 있음

cf. static 변수는 처음 한 번만 초기화하고 다음부터는 전의 값을 그대로 사용함

call by value
-> 값을 복사하여 전달

call by pointer (reference)
->원본을 전달

cf. c에서의 pointer(주소)는 다른 객체지향 언어에서의 reference(참조)와 같은 의미임

macro 함수
- #define으로 정의
- 전처리기가 처리
- 전처리를 할 때 해당 함수에 대응하는 것들을 바꿔치리(전처리)함
- sf도 만들어지지 않고 진짜 그냥 코드를 바꿔서 처리함
- parameters의 data type을 고려하지 않음

inline 함수
- 컴파일 과정에서 처리됨
- data type 고려함
- sf이 만들어지지 않음

cf. #이 붙은 것들은 전처리기가 처리함

가변인자 함수
- 함수에 인자를 여러 가지 넣을 수 있음
- ...으로 가변인자 표현
ex) int add(int a, ...), printf

리스트 at 가변인자 함수
- va_list(name) : 리스트 생성
- va_start(name, length) : 값 읽어오기
- va_arg(name, type) : 값 활용하기 (해당 값을 리턴함)
- va_end(name) : 리스트 삭제

재귀호출
- 니가 아는 그거

배열
- 니가 아는 그거
- 인덱스 번호로 구분함
ex) int [5]arr;, int arr[5];
    int arr[2][3];, int [3][2]arr;

sf 배열 할당
- sf안에 연속된 주소들에 값들을 할당함
- 해당 배열 안에 어떤 자료형을 넣느냐에 따라 몇 바이트마다 데이터가 들어가는지가 달라짐
- 배열의 이름 = 포인터 상수 (reference, pointer)
ex) int -> 1000, 1004, 1008
    double -> 1000, 1008, 1016
    int[4] -> 1000, 1016, 1032


//시스템프로그래밍 9주차
#include <stdio.h>
#include <limits.h>
#include <math.h>
#include <stdarg.h>

//    ----------------------- ex -------------------------
//int main(void) {
//    
//    int arr[5] = {10, 20, 30, 40, 50};
//    
//    arr[1] = arr[0] + arr[2];
//    
//    for (int i = 0; i < 5; ++i) {
//        printf("%d \n", *(arr + i));
//    }
//    
//    printf("%p \n", arr);
//    printf("%p \n", arr + 2);
//    
//    printf("%d \n", *(arr + 2));
//    
//    printf("%p, \n", "hello");
//    
//    return 0;
//}

//    ----------------------- 8-14 -------------------------
//void to_binary(int n) {
//    if (n == 0) {
//        return;
//    }
//    else {
//        to_binary(n / 2);
//    }
//    
//    printf("current n %% 2 is %d \n", n % 2);
//    
//    return;
//}
//
//
//int main(void) {
//    
//    int n;
//    scanf("%d", &n);
//    to_binary(n);
//    
//    return 0;
//}

//    ----------------------- 8-14 -------------------------
//int facto(int n) {
//    if (n == 1) {
//        return 1;
//    }
//    else {
//        return n * facto(n - 1);
//    }
//    
//}
//
//
//int main(void) {
//    
//    int n;
//    scanf("%d", &n);
//    printf("facto of n is %d \n", facto(n));
//    
//    return 0;
//}

//    ----------------------- 8-12 -------------------------
//// find_min(3, 10, 9, 4)
//int find_min(int count, ...) {
//    
//    int min, temp, i;
//    
//    //리스트 생성
//    va_list(p);
//    
//    //값 복사
//    va_start(p, count);
//    
//    //값 읽어오기
//    //처음 있는 값(10)을 읽어오고 다음 값을 읽을 준비를 함
//    min = va_arg(p, int);
//    
//    for (i = 2; i <= count; ++i) {
//        //다음 값(9)를 읽어보고 다음 값을 읽을 준비를 함
//        temp = va_arg(p, int);
//        if (temp < min) {
//            min = temp;
//        }
//    }
//    
//    //리스트 삭제
//    va_end(p);
//    
//    return min;
//}
//
//int main(void) {
//    
//    int arg_count = 3;
//    int min = find_min(arg_count, 10, 9, 4);
//    printf("min is %d \n", min);
//    
//    
//    return 0;
//}

//    ----------------------- 8-12 -------------------------
//int add(int a, int b, ...) {
//    return a + b;
//}
//
//
//int main(void) {
//    
//    int a = 3, b = 6;
//    int sum = add(3, 6, 9);
//    
//    printf("sum is %d \n", sum);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
////#define add(a, b) ( (a) + (b) )
//
//inline int add(int a, int b) {
//
//    return ( a + b );
//}
//
//int main(void) {
//    
//    int a = 3, b = 6;
//    
//    int sum = add(a, b);
//    
//    printf("sum is %d \n", sum);
//    
//    return 0;
//}

//    ----------------------- 8-10 -------------------------
//void swap(int m, int n) {
//    
//    int temp = 0;
//    printf("before swap in SWAP : m is %d, n is %d \n", m, n);
//    
//    temp = m;
//    m = n;
//    n = temp;
//    
//    printf("after swap in SWAP : m is %d, n is %d \n", m, n);
//    
//    return;
//}
//
//
//int main(void) {
//    
//    int a = 10, b = 5;
//    
//    printf("before swap in MAIN: a is %d, b is %d \n", a, b);
//    swap(a, b);
//    printf("after swap in MAIN: a is %d, b is %d \n", a, b);
//    
//    return 0;
//}

//    ----------------------- 8-9 -------------------------
//void call_count(void) {
//    
//    static int call_number = 0;
//    call_number++;
//    printf("%drth call \n", call_number);
//    
//    return;
//}
//
//int main(void) {
//    
//    for (int i = 0; i < 6; ++i) {
//        call_count();
//    }
//    
//    return 0;
//}

//    ----------------------- 8-8 -------------------------
//void sum_up(int n) {
//
//    static int sum = 0;
//    sum += n;
//    printf("accumulated sum is %d \n", sum);
//
//    return;
//}
//
//int main(void) {
//    
//    for (int i = 0; i < 4; ++i) {
//        sum_up(i);
//    }
//    return 0;
//}

//    ----------------------- ex -------------------------
//int sum;
//
//void sum_up(int n) {
//    
//    sum += n;
//    printf("accumulated sum is %d \n", sum);
//    
//    return;
//}
//
//int main(void) {
//    
//    int num, i;
//    sum = 0;
//    
//    for (i = 0; i < 4; ++i) {
//        sum_up(i);
//    }
//    
//    printf("sum is %d \n", sum);
//    
//    return 0;
//}
