시스템프로그래밍기초 9주차

data/heap/stack
- 전역변수는 data
- 동적 할당은 heap
- 함수는 stack

cf. 함수는 변수를 사용할 때 먼저 본인의 sf를 확인하고 없으면 data를 확인함

auto 변수
- 일반적으로 int name 하면 auto 변수임

static 변수
- 함수 안에서 정의하지만 data에 만들어짐
- but, 정의된 함수 내에서만 사용 가능
- 함수가 종료되어도 값이 사라지지 않음
-> 다음 번 함수 호출에서 전 함수가 내놓은 값을 사용할 수 있음

cf. static 변수는 처음 한 번만 초기화하고 다음부터는 전의 값을 그대로 사용함

call by value
-> 값을 복사하여 전달

call by pointer (reference)
->원본을 전달

cf. c에서의 pointer(주소)는 다른 객체지향 언어에서의 reference(참조)와 같은 의미임

macro 함수
- #define으로 정의
- 전처리기가 처리
- 전처리를 할 때 해당 함수에 대응하는 것들을 바꿔치리(전처리)함
- sf도 만들어지지 않고 진짜 그냥 코드를 바꿔서 처리함
- parameters의 data type을 고려하지 않음

inline 함수
- 컴파일 과정에서 처리됨
- data type 고려함
- sf이 만들어지지 않음

cf. #이 붙은 것들은 전처리기가 처리함

가변인자 함수
- 함수에 인자를 여러 가지 넣을 수 있음
- ...으로 가변인자 표현
ex) int add(int a, ...), printf

리스트 at 가변인자 함수
- va_list(name) : 리스트 생성
- va_start(name, length) : 값 읽어오기
- va_arg(name, type) : 값 활용하기 (해당 값을 리턴함)
- va_end(name) : 리스트 삭제

재귀호출
- 니가 아는 그거

배열
- 니가 아는 그거
- 인덱스 번호로 구분함
ex) int [5]arr;, int arr[5];
    int arr[2][3];, int [3][2]arr;

sf 배열 할당
- sf안에 연속된 주소들에 값들을 할당함
- 해당 배열 안에 어떤 자료형을 넣느냐에 따라 몇 바이트마다 데이터가 들어가는지가 달라짐
- 주소 = 포인터 상수 (reference, pointer)
ex) int -> 1000, 1004, 1008
    double -> 1000, 1008, 1016
