시스템프로그래밍기초 14주차

문자열 자체도 포인트 상수

구조체
- 니가 아는 그거
struct name {
  int x;
  char y;
};

class와 struct
- 구조체는 다른 종류의 data만을 포함
- but, class는 함수도 포함함
- 구조체(설계도)를 선언하면 실체가 만들어짐
- 클래스(설계도)를 선언하면 인스턴스가 만들어짐 / 말을 이렇게 함

참조 연산자
- * : just 참조
- . : 맴버 참조 / 얘가 우선순위 더 높음
- (*p).x == p -> x

기말 시험
- 전범위



//시스템프로그래밍기초 14주차
#include <stdio.h>
#include <limits.h>
#include <math.h>
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include "time.h"

//    ----------------------- ex -------------------------
//struct employee {
//    int entry;
//    char name[20];
//    char phone[15];
//};
//
//int main(void) {
//    
//    struct employee arr[3] = {
//        {2020, "anne", "010-1234-5678"},
//        {2021, "bille", "010-4929-5739"},
//        {2023, "henry", "010-4830-4839"}
//    };
//    
//    for (int i = 0; i < 3; ++i) {
//        printf("%d, %s, %s \n", arr[i].entry, arr[i].name, arr[i].phone);
//    }
//    
//    return 0;
//}

//    ----------------------- 13-7 -------------------------
//struct employee {
//    int entry_year;
//    char residece[6];
//    char* name;
//};
//
//int main(void) {
//    
//    struct employee a = {2019, "seoul", NULL};
//    struct employee b;
//    
//    a.name = (char*)malloc(sizeof(char) * 5);
//    
//    b = a;
//    
//    strcpy(b.name, "Park");
//    
//    printf("%d, %s, %s \n", a.entry_year, a.residece, a.name);
//    printf("%d, %s, %s \n", b.entry_year, b.residece, b.name);
//    
//    free(a.name);
//    
//    return 0;
//}

//    ----------------------- 13-5 -------------------------
//struct point {
//    int y;
//    int x;
//};
//
//struct point increament(struct point s) {
//    
//    s.y++;
//    s.x++;
//    return s;
//}
//
//int main(void) {
//    
//    struct point a = {1, 1};
//    struct point b, c;
//    
//    b = a;
//    c = increament(a);
//    
//    printf("%d, %d \n", b.y, b.x);
//    printf("%d, %d \n", c.y, c.x);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//struct point {
//    int y;
//    int x;
//};
//
//struct rectangle {
//    struct point left_top;
//    struct point right_bottom;
//};
//
//int main(void) {
//    
//    struct point p1 = {3, 4};
//    struct point* ptr = &p1;
//    
////    printf("%d, %d \n", p1.x, p1.y);
////    printf("%d, %d \n", (*ptr).x, (*ptr).y);
////    printf("%d, %d \n", ptr -> x, ptr -> y);
//    
//    struct rectangle* p;
//    int dy, dx;
//    
//    p = (struct rectangle*)malloc(sizeof(struct rectangle));
//    if (p == NULL) {
//        return 0;
//    }
//    
//    p -> left_top.x = 2;
//    p -> left_top.y = 8;
//    p -> right_bottom.x = 4;
//    p -> right_bottom.y = 5;
//    
//    dy = abs(p->left_top.y - p-> right_bottom.y);
//    dx = abs(p->left_top.x - p-> right_bottom.x);
//    
//    printf("%d, %d \n", dy, dx);
//
//    return 0;
//}

//    ----------------------- ex -------------------------
//typedef struct {
//    char name[8];
//    int year;
//    int mileage;
//} car;
//
//int main(void) {
//    
//
//    
//    return 0;
//}

//    ----------------------- 13-1 -------------------------
//struct car {
//    char name[8];
//    int year;
//    int mileage;
//};
//
//int main(void) {
//    struct car mycar = {"pony", 1975, 300000};
//    
//    printf("%s \n", mycar.name);
//    printf("%d \n", mycar.year);
//    printf("%d \n", mycar.mileage);
//    
//    struct car yourcar;
//    
//    strcpy(yourcar.name, "ss");
//    yourcar.year = 1933;
//    yourcar.mileage = 43832;
//    
//    printf("%s \n", yourcar.name);
//    printf("%d \n", yourcar.year);
//    printf("%d \n", yourcar.mileage);
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//#define MAX 10
//
//int main(void) {
//    
//    char* wish_list[3];
//    char temp[100];
//    
//    int i = 0;
//    int j;
//    
//    while (1) {
//        if (i == 3) {
//            break;
//        }
//        
//        printf("Enter your wishes down here: \n");
//        scanf("%s", temp);
//        if (strcmp(temp, "quit") == 0) {
//            break;
//        }
//        
//        wish_list[i] = (char*)malloc(sizeof(char) * (strlen(temp) + 1));
//        
//        if (wish_list[i] == NULL) {
//            return 0;
//        }
//        
//        strcpy(wish_list[i], temp);
//        
//        i++;
//    }
//    
//    for (j = 0; j < i; ++j) {
//        puts(wish_list[j]);
//        free(wish_list[j]);
//        wish_list[j] = NULL;
//    }
//    
//    return 0;
//}

//    ----------------------- 12-29 -------------------------
//int main(void) {
//    
//    char conti[3][5] = {"Kim", "Lee", "Park"};
//    char temp[5];
//    
//    char* ragged[3] = {"Kim", "Lee", "Park"};
//    char* temp_ptr = NULL;
//    
//    strcpy(temp, conti[0]);
//    strcpy(conti[0], conti[2]);
//    strcpy(conti[2], temp);
//    
//    for (int i = 0; i < 3; ++i) {
//        puts(conti[i]);
//    }
//    
//    temp_ptr = ragged[0];
//    ragged[0] = ragged[2];
//    ragged[2] = temp_ptr;
//    
//    for (int i = 0; i < 3; ++i) {
//        puts(ragged[i]);
//    }
//    
//    return 0;
//}

//    ----------------------- ex -------------------------
//#define MAX 10
//#define FRINED 3
//
//int main(void) {
//
//    char name[MAX];
//    char list[FRINED][MAX];
//    
//    printf("Enter a frined name down here: \n");
//    for (int i = 0; i < FRINED; ++i) {
//        scanf("%s", name);
//        strcpy(list[i], name);
//    }
//    
//    for (int i = 0; i < FRINED; ++i) {
//        puts(list[i]);
//    }
//    
//    
//    return 0;
//}
