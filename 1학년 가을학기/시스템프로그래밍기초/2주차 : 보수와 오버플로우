시스템프로그래밍기초 2주차

program -> data + command

data
- 숫자 -> 정수, 실수
- 문자 -> 문자(''), 문자열(string, "")
ex) "Hello "
-> H, e, l, l, o, " ", \0 (null문자)

command
- 말로 된 명령

-----------------------------------------

뺄셈에서 보수의 활용
ex) 25 - 19 = 6
  1. 25에 19에 대한 10의 보수를 더함
  2. 더한 수에서 기준수(100)를 삭제함
ex) 0111 - 0011 = 0100
  1. 0111에 0100에 대한 2의 보수를 더함
  2. 더한 수에서 기준수(10000)을 삭제함

정수 리터럴
- 정수를 표현하는 방법
ex) 3 -> 0011
   -3 -> 1101 (이진수 0011에 대한 2의 보수, 13을 나타내기도 함)
   보수를 이용하여 음수를 표현함
   
2진수 보수
- 어떤 수에 대한 1의 보수는 01 반전
- 거기에 +1 해주면 2의 보수가 됨

4비트 2진수 시스템
- signed, unsigned
- 쉽게 말해서, unsigned는 양수만 쓰고 signed는 음수도 씀
- 위의 1101이 나타내는 -3과 13의 관계에서 -3을 쓰면 signed, 13을 쓰면 unsigned라고 보면 됨

부호절대치방법
- 위의 숫자들을 signed로 봤을 때 가장 큰 자리 수의 숫자가 0이면 양수, 1이면 음수이기 때문에 가능함
- 앞의 숫자들을 묶어두고(부호를 표시하는 값으로 고정함) 2의 보수인 값을 절댓값으로 하는 수로 설정함
ex) 1110 
  1. 앞자리가 1이니 음수
  2. 1110의 2에 대한 보수는 0010(2)
  3. 따라서 1110은 절댓값이 2인 음수
  4. -2

signed, unsigned 구분
| -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |

- 8은 min값으로 특별하게 취급함
- -8부터 7까지는 signed의 범위
- 1부터 7까지는 signed도 될 수 있고 unsigned도 될 수 있기 때문에 1U, 7U 등 unsigend일 경우에 U를 붙여 구분함
- 8부터 15까지는 U를 표시하거나 안 해도 상관없음

오버플로우(overflow)
- 계산 결과가 표현할 수 있는 범위를 벗어나는 것
- 두 수를 더할 때(뺄셈은 음수를 더함) 계산 결과의 가장 큰 자릿수와 마지막 carry(올림수)가 같으면 오버플로우가 아님
- XOR 게이트로 오버플로우 여부를 판단함
ex)
      1   1   0           (Carry)
      0   1   1   1       (int 1)
   +  1   1   1   0       (int 2)
  -------------------------------
  1   0   0   0   1       (Sum)

-> 가장 큰 자릿수와 마지막 carry가 같음(오버플로우 아님)

//오버플로우가 나는 예시를 하나 더 넣어놓기

실수 리터럴
- 실수를 표현하는 방법
- 소수점으로 표현된 숫자, 과학적 표기법이 적용된 숫자 (12.34, 32e + 3)
- 실수는 다 singned임

부동소수점 표현
ex) 2.5(10.1)
//소수점 표현 이해하고 정리해서 넣어놓기

2진수의 16진수 표현
ex) 0000 (0)
    1001 (9)
    1010 (A)
    1011 (B)
    1111 (F)
-> 2진수 4자리는 16진수의 한 숫자 주기에 해당함
-> 2진수 4자리씩을 16진수 1자리로 바꿀 수 있음
cf. 2진수의 자릿수가 4의 배수가 아니라면 가장 왼쪽에 0을 붙이는 제로패딩(zero pading)을 함

10진수의 16진수 표현
- 10진수를 2진수로 바꾸고 다시 16진수로 바꾸면 됨
- 10진수 소수를 2진수 소수로 변환할 때 무한소수가 나올 수 있음

변수
ex) x = x + 1;
l-value / r-value
저장소    / 값

IEEE754 부동소수점 표현 (ieee)


실행과정
| 전역영역 | heep | 스택 |
- 스택에 main함수를 위한 main stackframe이 만들어짐
- 여기에 int 변수 저장 등등을 함
- main함수 내의 다른 함수는 스택의 main stackframe과 다른 stackframe에서 실행됨
- 문자열은 전역 영역에 저장함

c언어 자료형
| 데이터 타입 | 일반 32비트 | 인텔 IA-32 | x86-64 |
|------------|------------|------------|--------|
 문자
| char       | 1          | 1          | 1      |
 정수
| short      | 2          | 2          | 2      |
| int        | 4          | 4          | 4      |
| long       | 4          | 4          | 8      |
| long long  | 8          | 8          | 8      |
 부동소수       
| float      | 4          | 4          | 4      |
| double     | 8          | 8          | 8      |
| long double| 16         | 8          | 8      |
//자료형 선언을 어떻게 해야 하는지 할당되는 메모리의 용량에 관하여 적어놓기
