자료구조 5주차

첫 번째 수업

positional list
- 포지션 값도 같이 저장을 하고 있음
- direct access를 포지션으로 할 수 있음 (맵 비슷한 거인 듯)

iterator (반복자)
- 모두 빠짐없이 반복 없이 스캔하는거

growable arrary-based array list
- 그냥 array의 크기를 늘릴 수 있다고

------------------------------------------
두 번쨰 수업

tree
- non linear structuce
- abstract data type (추상 데이터 타입)
- applications : sooooooo many things you know

feature
- root : have no parent
- internal node : have at least one child
- external node : leaf node
- ancester : just node above (한 노드의 입장에서)
- descendant : just node down (한 노드의 입장에서)
- depth : number of ancester
- height : maximum of depth
- subtree : tree consisting of a node and its descendants (노드 b를 루트로 하는 서브트리)
  그냥 부모와 자식이 묶이면 다 서브트리임, 모든 자식이 들어갈 필요는 없음
- sibling : nodes that have same depth and from same parent
- edge : what you know, in tree, it only exists between parent and child
- path : sequence of node to node
- forest : trees
- ordered tree : perfect binary tree?

ADT
- generic method :
  integer size()
  boolen isEmpty()
  iterator iterator()
  iterable positions() -> 각각의 노드의 위치를 다 알려줌
- accseeor method
  position root()
  positoin parent(p)
  iterable children(p) -> child를 순회하며 찾아야 하기 때문
- query method
  boolen isInternal(p)
  boolen isExternal(p)
  beelen isRoot(p)
- update method
  element replace(p, o)
  remove, add...

binary tree
- every nodes have at most two child
- children have order
- full(proper) binary tree : every node has 0 or 2 child
- complete binary tree : 왼쪽부터 그거 채우는 방법 그거 있잖아 그걸로 채우는거
- perfect binary tree : every node has two nodes except for leaves






