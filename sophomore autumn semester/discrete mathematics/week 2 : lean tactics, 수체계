자, Lean4를 배워봅시다!
test_config : 0이 자연수니? 이거 나오는데 두 가지 견해에 대해서 다 쓸 것

# 연산자

논리
∀ : \forall / 모든 (for all)
∃ : \exists / 존재 (there exists)
¬ : \not / 부정 (not)
∧ : \and / 논리곱 (and)
∨ : \or / 논리합 (or)
↔ : \iff / 동치 (iff)
→ : \to 또는 \imp / 함의 (implies)

집합/관계
∈ : \in / 원소 포함
∉ : \notin / 원소가 아님
⊂ : \subset / 부분집합
⊆ : \subseteq / 부분집합(= 포함 가능)
∪ : \union / 합집합
∩ : \inter / 교집합

수 체계
ℕ : \nat / 자연수
ℤ : \int / 정수
ℚ : \rat / 유리수
ℝ : \real / 실수
ℂ : \complex / 복소수

수학 기호
≤ : \le / 작거나 같다
≥ : \ge / 크거나 같다
× : \times / 곱셈, 곱집합
: \plus / 덧셈 (점모양 그거입니다..)
∑ : \sum / 합 (summation)
∏ : \prod / 곱 (product)

함수/증명 구조
λ : \lam / 람다 (익명 함수)
⟨ ⟩ : \langle, \rangle / 쌍 (pair, angle bracket)
⊢ : \vdash / 턴스타일 (provable)

그리스 문자
α : \alpha / 그리스 소문자 알파
β : \beta / 그리스 소문자 베타
γ : \gamma / 그리스 소문자 감마
Γ : \Gamma / 그리스 대문자 감마
φ : \phi / 그리스 소문자 파이
Φ : \Phi / 그리스 대문자 파이


# Lean tactics

rfl 
- reflexivity(반사성) : 좌변과 우변이 동일하다라는 사실을 자동으로 증명하는 전술.
- 정의적 동일성(definitional equality)만 인정한다.
- 복잡한 식, 중간에 다른 정리가 필요한 경우에는 실패한다.
- 강력하지만 제약이 많음

rw
- 등식(=) 또는 논리 동치(↔) 정리 h를 사용해서 현재 목표(goal) 안의 어떤 부분을 치환
- 반드시 대활호 안에 증명 이름이 들어가야 함
- rw [add_comm b c] : b + c를 c + b로 치환해라 (항을 뒤집는다)
- rw [add_zero] : 0이 더해져 있는 부분을 없애줌
- rw [h1, h2, h3] : 순서대로 차례차례 적용
- rw [h] at ⊢ : 목표 전체 (기본 동작)
- rw [h] at H : 특정 가정
- rw [h] at * : 모든 가능한 곳에 다 적용

ring
- 대수적 구조를 이용하여 자동적으로 처리해준다

by
- by 뒤에 오는 것으로 전술을 하겠다


# 수 체계
너가 아는 그 실수 자연수 허수 그런거
실수가 수직선에 표시 가능한 수임 상식..

기수(base)
- 진수 표현을 숫자에 아래첨자로 씀
- 예를 들어, 10진법이면 10^-2과 같은 것들을 base라고 함
- lean에서 표현하는 방법은 c++과 동일한 듯? (Ob1101과 비슷)

하한항(lowest)
- 기약분수

닫혀있다(closed)
- 해당 수 체계가 해당 연산에 대해 닫혀있다 : 해당 수 체계끼리 연산하여 해당 수 체계가 나오지 않는다
- ex : 자연수를 자연수로 나누면 자연수가 나오지 않을 수 있음 -> 자연수는 나눗셈에 대해 닫혀있다

항등원, 역원
- 네가 아는 그거 0, 1, -a, 1/a


# 진법 변환

10 -> 2
- 정수부 : 네가 아는 그거
- 실수부 : 소수부에 계속 2(바꾸고 싶은 진법)으로 해서 실수부에 1이 올라오면 1을 쓰고 올라오지 않으면 0을 씀






